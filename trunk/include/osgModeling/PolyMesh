/* -*-c++-*- osgModeling - Copyright (C) 2008 Wang Rui <wangray84@gmail.com>
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.

* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.

* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef OSGMODELING_POLYMESH
#define OSGMODELING_POLYMESH 1

#include <osg/CopyOp>
#include <osg/MixinVector>
#include <osg/Geometry>
#include <osgModeling/Export>

namespace osgModeling {

/** PolyMesh class
 * The PolyMesh defines the structure of polygonal mesh and can be used in various cases.
 */
    class OSGMODELING_EXPORT PolyMesh : public osg::Geometry
{
public:
    struct Vertex;
    struct Edge;
    struct Face;

    typedef osg::MixinVector<Vertex*> VertexList;
    typedef osg::MixinVector<Edge*> EdgeList;
    typedef osg::MixinVector<Face*> FaceList;

    enum EdgeType { INVALID_EDGE=0, BORDER_EDGE, MANIFOLD_EDGE, JUNCTION_EDGE };

    struct Vertex
    {
        int _index;  // Index in Geometry::getVertexArray();
        const osg::Vec3* _val;  // Value of vertex, not changeable.
        EdgeList _edges; // Edges shared this vertex
        FaceList _faces; // Faces shared this vertex

        Vertex( int i=0, const osg::Vec3* v=0 ) : _index(i), _val(v) {}
        bool hasEdge( Edge* e, bool addIfNotFound=false );
        bool hasFace( Face* f, bool addIfNotFound=false );
        inline osg::Vec3 get() { return _val?*_val:osg::Vec3(0.0f,0.0f,0.0f); }
    };

    struct Edge
    {
        Vertex* _v[2];  // Vertex indices of the edge
        FaceList _faces; // Faces shared this edge

        Edge( Vertex* v1=0, Vertex* v2=0 ) { _v[0]=v1; _v[1]=v2; }
        EdgeType getType();
        bool hasFace( Face* f, bool addIfNotFound=false );
        inline osg::Vec3 operator[] ( unsigned int i ) { return _v[i]->get(); }
    };

    struct Face
    {
        VertexList _vertices; // Vertices of this face

        Face() {}
        bool hasVertex( Vertex* v, bool addIfNotFound=false );
        inline osg::Vec3 operator[] ( unsigned int i ) { return _vertices[i]->get(); }
    };

    PolyMesh();
    PolyMesh( const osg::Geometry& copy, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY );
    PolyMesh( const PolyMesh& copy, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY );

    VertexList _vertices;
    EdgeList _edges;
    FaceList _faces;

protected:
    virtual ~PolyMesh();
};

}

#endif
